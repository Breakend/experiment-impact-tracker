#!/usr/bin/env python3

import argparse
import os
import sys
from pprint import pprint

import numpy as np
import pandas as pd

import country_converter as coco
import experiment_impact_tracker
import geocoder
from experiment_impact_tracker.emissions.get_region_metrics import (
    get_current_region_info, get_sorted_region_infos,
    get_zone_information_by_coords)
from geopy.geocoders import Nominatim

gpu_data = pd.read_csv(os.path.join(os.path.dirname(experiment_impact_tracker.__file__), 'gpu/data/tdp.csv'))
cpu_data = pd.read_csv(os.path.join(os.path.dirname(experiment_impact_tracker.__file__), 'cpu/data/cpu_tdp.csv'))

def cmdline_args():
    # Make parser object
    p = argparse.ArgumentParser(description=
        """
        This estimates the amount of energy used and emission based on IP address of your server, GPU type, experiment length, and some utilization factor. 
        This is similar to what is done by https://mlco2.github.io/impact/#compute. Please also cite their paper if using this script.
        """,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    
    p.add_argument("--experiment-length-seconds", type=float, help="The length of your experiment in seconds.")
    p.add_argument("--location", type=str, help="If no IP address provided, please provide an address: e.g., Montreal, QC, Canada")    
    p.add_argument("--gpu", type=str, help="The GPU name, from [{}]".format(", ".join(gpu_data["name"])))
    p.add_argument("--cpu", type=str, help="The CPU name, from [{}]".format(", ".join(cpu_data["Model"])))
    p.add_argument("--gpu-utilization-factor", type=float, help="What percentage of the GPU do you think your application used.")
    p.add_argument("--cpu-utilization-factor", type=float, help="What percentage of the GPU do you think your application used.")
    return(p.parse_args())


if __name__ == '__main__':
    
    if sys.version_info<(3,0,0):
        sys.stderr.write("You need python 3.0 or later to run this script\n")
        sys.exit(1)

    args = cmdline_args()
    gpu_vals = gpu_data.loc[gpu_data['name'] == args.gpu]

  
    if args.location is not None:
        geolocator = Nominatim(user_agent="experiment_impact_tracker")
        location = geolocator.geocode(args.location, addressdetails=True)
        country_code = location.raw["address"]["country_code"]
        zone_name, zone_info = get_zone_information_by_coords((location.latitude, location.longitude))
    else:
        raise ValueError("Must provide location.")


    pprint(zone_name)

    carbonIntensity = zone_info['carbonIntensity']
    carbonIntensity_source = zone_info['_source']

    kWh = float(gpu_vals['tdp']) * args.gpu_utilization_factor * (args.experiment_length_seconds / 3600.) /1000.

    if args.cpu is not None:
        if args.cpu not in cpu_data["Model"].tolist():
            raise ValueError(f"CPU {args.cpu} not in available CPUs: {cpu_data['Model']}")

        tdp = cpu_data[cpu_data["Model"] == args.cpu]["TDP"].tolist()[0].replace("W", "").strip()
        cpu_kWh = float(tdp) * args.cpu_utilization_factor * (args.experiment_length_seconds / 3600.) /1000.
        kWh += cpu_kWh

    kg_carbon = (carbonIntensity * kWh) / 1000.0

    ssc = pd.read_csv("https://raw.githubusercontent.com/country-level-scc/cscc-database-2018/master/cscc_db_v2.csv")
    ISO3_COUNTRY_CODE = coco.convert(names=[country_code], to='ISO3')
    # only use short-run model
    ssc = ssc[ssc["run"] == "bhm_sr"]
    ssc = ssc[ssc["SSP"] == "SSP2"]
    ssc = ssc[ssc["ISO3"] == ISO3_COUNTRY_CODE]
    ssc = ssc[np.isnan(ssc["dr"])] # use only growth adjusted models
    ssc = ssc[ssc["prtp"] == 2] # a growth adjusted discount rate with 2% pure rate of time preference
    ssc = ssc[ssc["eta"] == "1p5"] # IES of 1.5
    ssc = ssc[ssc["RCP"] == "rcp60"] # rcp 6, middle of the road
    ssc = ssc[ssc["dmgfuncpar"] == "bootstrap"]
    ssc = ssc[ssc["climate"] == "uncertain"]
    
    median = ssc["50%"]
    lower = ssc["16.7%"]
    upper = ssc["83.3%"]

    median_carbon_cost = (kg_carbon / 1000.) * float(median)
    upper_carbon_cost = (kg_carbon / 1000.) * float(upper)
    lower_carbon_cost = (kg_carbon / 1000.) * float(lower)

    bibtex_nature = """
    @article{ricke2018country,
        title={Country-level social cost of carbon},
        author={Ricke, Katharine and Drouet, Laurent and Caldeira, Ken and Tavoni, Massimo},
        journal={Nature Climate Change},
        volume={8},
        number={10},
        pages={895},
        year={2018},
        publisher={Nature Publishing Group}
    }
    """

    bibtex_experiment_impact_tracker = """
    @misc{henderson2020systematic,
        title={Towards the Systematic Reporting of the Energy and Carbon Footprints of Machine Learning},
        author={Peter Henderson and Jieru Hu and Joshua Romoff and Emma Brunskill and Dan Jurafsky and Joelle Pineau},
        year={2020},
        eprint={2002.05651},
        archivePrefix={arXiv},
        primaryClass={cs.CY}
    }
    """
    print(
        "This work contributed a rough estimate of {:.3f} kg of $\\text{{CO}}_{{2eq}}$ to the atmosphere and used {:.3f} kWh of electricity, having a {}-specific social cost of carbon of \${:.2f} (\${:.2f}, \${:.2f}). This assumes {runtime:.3f} hours of runtime, a region-specific carbon intensity of {carbon_intensity} g per kWh (see {carbonIntensity_source}), a {gpu} GPU, a {cpu} CPU, a CPU utilization of {cpu_util}, a GPU utilization of {gpu_util}. The social cost of carbon uses models from \\citep{{ricke2018country}} and this statement and carbon emissions information was generated using the \emph{{get-rough-emissions-estimate}} script of the \\emph{{experiment-impact-tracker}}\\citep{{henderson2019climate}}.\n\n{}\n\n{}".format(kg_carbon, kWh, ISO3_COUNTRY_CODE, median_carbon_cost, lower_carbon_cost, upper_carbon_cost, bibtex_nature, bibtex_experiment_impact_tracker, gpu=args.gpu, cpu=args.cpu, runtime=args.experiment_length_seconds/60/60, cpu_util=args.cpu_utilization_factor, gpu_util=args.gpu_utilization_factor, carbon_intensity=carbonIntensity, carbonIntensity_source=carbonIntensity_source)
    )

    if median_carbon_cost < 0 or lower_carbon_cost < 0 or upper_carbon_cost < 0:
        print("Note: the Canada-specific social cost of carbon is negative in this case as explained by \citet{{ricke2018country}}: ``The CSCC captures the amount of marginal damage (or, if negative, the benefit) expected to occurin an individual country as a consequence of additional CO2 emission... Northern Europe, Canada and the Former Soviet Union have negative CSCC values because their current temperatures are below the economic optimum.''")
